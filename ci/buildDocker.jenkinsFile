def getFullImage(component){
  echo "constructing tag for ${component}, env.IMAGETAG: ${env.IMAGETAG} IMAGETAG ${IMAGETAG}"
  if (IMAGETAG.trim()){
    echo "Image tag forced to ${IMAGETAG} using it for tagging docker images!"
    return "${env.DOCKER_REPO}/${component}:${env.IMAGETAG}"
  } else {
    return "${env.DOCKER_REPO}/${component}:${env.DOCKER_TAG_PREFIX}-${env.BUILD_NUMBER}"
  }
}

def BUILT_IMAGETAGS=''

pipeline {
  agent {
    kubernetes {
      label 'docker-build-pod'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  scope: jenkins
spec:
  # serviceAccountName: jenkins-master2staging
  containers:
  - name: docker
    image: docker:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
"""
    }
  }
  parameters {
    string(name: 'DOCKER_REPO',
        defaultValue: 'docker.ask4ua.com',
        description: 'docker repo')
    string(name: 'DOCKER_REPO_SECRET',
        defaultValue: '',
        description: 'docker repo secret')
    string(name: 'DOCKER_TAG_PREFIX',
        defaultValue: '0.0.0',
        description: 'Jenkins docker tag, if not propagated - used 0.0.0')
    string(name: 'DOCKERFILE_PATH',
        defaultValue: './docker/',
        description: 'For forcing path to folder with dockerfile')
    string(name: 'COMPONENTS',
        defaultValue: 'webapp db',
        description: 'Jenkins secret ID for ARM Registry Credentials')
    string(name: 'IMAGETAG',
        defaultValue: '',
        description: 'For forcing IMAGETAG results')
  }

  stages {
    stage('Rebuild Application Container') {
      steps {
        script {
          COMPONENTS.split().each { component ->
            container('docker') {
              sh """
                  echo "Starting Docker Build for ${component}"
                  docker build ${DOCKERFILE_PATH} -t "${getFullImage(component)}"
                  docker push "${getFullImage(component)}"
              """
            }
          }
        }
      }
    }
    stage('Return ContainerName') {
      steps {
        script {
          if(!BUILT_IMAGETAGS){
            COMPONENTS.split().each { component ->
              BUILT_IMAGETAGS+=getFullImage(component) + " "
            }
            
            if(BUILT_IMAGETAGS){
              BUILT_IMAGETAGS=BUILT_IMAGETAGS[0..<-1]
            }
          }
          echo "${BUILT_IMAGETAGS}"
          return "${BUILT_IMAGETAGS}"
        }
      }
    }
  }
}