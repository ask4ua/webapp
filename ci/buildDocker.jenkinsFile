  def getFullImage(component){
    return "${env.DOCKER_REPO}/${component}:${env.DOCKER_TAG_PREFIX}-${env.BUILD_NUMBER}"
  }

pipeline {
  agent {
    kubernetes {
      label 'build-service-pod'
      defaultContainer 'jnlp'
      yaml """
apiVersion: v1
kind: Pod
metadata:
labels:
  scope: jenkins
spec:
  # serviceAccountName: jenkins-webapp
  containers:
  - name: docker
    image: docker:latest
    command:
    - cat
    tty: true
    volumeMounts:
    - mountPath: /var/run/docker.sock
      name: docker-sock
  volumes:
    - name: docker-sock
      hostPath:
        path: /var/run/docker.sock
"""
}
   }
  parameters {
    string(name: 'DOCKER_REPO',
        defaultValue: 'docker.ask4ua.com',
        description: 'Jenkins secret ID for ARM Registry Credentials')
    string(name: 'DOCKER_TAG_PREFIX',
        defaultValue: '0.0.0',
        description: 'Jenkins secret ID for ARM Registry Credentials')
    string(name: 'COMPONENTS',
        defaultValue: 'webapp db',
        description: 'Jenkins secret ID for ARM Registry Credentials')
  }

  stages {
    stage('Rebuild Application Container') {
      steps {
        script {
          COMPONENTS.split().each { component ->
            container('docker') {
              sh """
                  echo "Starting Docker Build for ${component}"
                  docker build ./docker/${component}/ -t "${getFullImage(component)}"
                  docker push "${getFullImage(component)}"
              """
            }
          }
        }
      }
    }
    stage('Return ContainerName') {
      steps {
        script {
          imageTags=""
          COMPONENTS.split().each { component ->
            imageTags+=getFullImage(component) + " "
          }
          if(imageTags){
            imageTags=imageTags[0..<-1]
          }
          echo "${imageTags}"
        }
        containerLog "jnlp"
      }
    }
  }
}